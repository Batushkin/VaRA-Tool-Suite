"""Projects in vara-test-repos used for testing the bug provider."""
import typing as tp

import benchbuild as bb
from plumbum import local

from varats.paper.paper_config import PaperConfigSpecificGit
from varats.project.project_domain import ProjectDomains
from varats.project.project_util import (
    ProjectBinaryWrapper,
    get_local_project_git_path,
    BinaryType,
)
from varats.project.varats_project import VProject
from varats.utils.git_util import RevisionBinaryMap, ShortCommitHash


class CFI(VProject):  # type: ignore
    """test repo for commit-feature interactions."""
    NAME = 'CFI'  # The name of the project
    GROUP = 'cpp_projects'  # The group this project belongs to
    DOMAIN = ProjectDomains.TEST  # The application domain of this project

    SOURCE = [
        PaperConfigSpecificGit(
            project_name="CFI",
            remote="https://github.com/sisteu56/cfi_test_repo.git",
            local="CFI",
            refspec="main",
            limit=None,
            shallow=False
        )
    ]

    test_files = ["main.cpp", "helper.cpp"]

    @staticmethod
    def binaries_for_revision(
        revision: ShortCommitHash
    ) -> tp.List[ProjectBinaryWrapper]:
        """Return a list of binaries generated by the project."""
        binary_map = RevisionBinaryMap(get_local_project_git_path(CFI.NAME))
        for test_file in ["main", "helper"]:
            binary_map.specify_binary(test_file, BinaryType.EXECUTABLE)

        return binary_map[revision]

    def run_tests(self) -> None:
        """This function defines tests and benchmarks for the project."""

    def compile(self) -> None:
        """Contains instructions on how to build the project."""
        source = local.path(self.source_of_primary)
        clang = bb.compiler.cxx(self)
        with local.cwd(source):
            for test_file in self.test_files:
                bb.watch(clang)(test_file, "-o", test_file.replace('.cpp', ''))
