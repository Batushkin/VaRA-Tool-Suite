"""Project file for SoftEtherVPN."""
import typing as tp
from pathlib import Path

import benchbuild as bb
from benchbuild.utils.cmd import make
from benchbuild.utils.settings import get_number_of_jobs
from plumbum import local

from varats.containers.containers import get_base_image, ImageBase
from varats.paper_mgmt.paper_config import (
    project_filter_generator,
    PaperConfigSpecificGit,
)
from varats.project.project_domain import ProjectDomains
from varats.project.project_util import (
    ProjectBinaryWrapper,
    get_local_project_git_path,
    BinaryType,
)
from varats.project.varats_project import VProject
from varats.utils.git_util import RevisionBinaryMap, ShortCommitHash
from varats.utils.settings import bb_cfg


class SoftEtherVPN(VProject):
    """Cross-platform multi-protocol VPN software."""

    NAME = 'SoftEtherVPN'
    GROUP = 'c_projects'
    DOMAIN = ProjectDomains.SECURITY

    SOURCE = [
        PaperConfigSpecificGit(
            project_name="SoftEtherVPN",
            remote="https://github.com/SoftEtherVPN/SoftEtherVPN.git",
            local="SoftherVPN",
            refspec="origin/HEAD",
            limit=None,
            shallow=False
        ),
        bb.source.GitSubmodule(
            remote="https://github.com/BLAKE2/BLAKE2.git",
            local="SoftherVPN/3dparty/BLAKE2",
            refspec="origin/HEAD",
            limit=None,
            shallow=False,
            version_filter=project_filter_generator("SoftEtherVPN")
        ),
        bb.source.GitSubmodule(
            remote="https://github.com/cxong/tinydir",
            local="SoftherVPN/3dparty/tinydir",
            refspec="origin/HEAD",
            limit=None,
            shallow=False,
            version_filter=project_filter_generator("SoftEtherVPN")
        ),
        bb.source.GitSubmodule(
            remote="https://github.com/google/cpu_features.git",
            local="SoftherVPN/src/Mayaqua/3rdparty/cpu_features",
            refspec="origin/HEAD",
            limit=None,
            shallow=False,
            version_filter=project_filter_generator("SoftEtherVPN")
        ),
        bb.source.GitSubmodule(
            remote="https://github.com/SoftEtherVPN/libhamcore.git",
            local="SoftherVPN/src/libhamcore",
            refspec="origin/HEAD",
            limit=None,
            shallow=False,
            version_filter=project_filter_generator("SoftEtherVPN")
        )
    ]

    CONTAINER = get_base_image(ImageBase.DEBIAN_11).run(
        'apt', 'install', '-y', 'cmake', 'make', 'pkg-config',
        'libncurses5-dev', 'libssl-dev', 'libsodium-dev', 'libreadline-dev',
        'zlib1g-dev'
    )

    @staticmethod
    def binaries_for_revision(
        revision: ShortCommitHash
    ) -> tp.List[ProjectBinaryWrapper]:
        """Return a list of binaries generated by the project."""
        binary_map = RevisionBinaryMap(
            get_local_project_git_path(SoftEtherVPN.NAME)
        )

        # binary_map.specify_binary("build/vpnserver", BinaryType.EXECUTABLE)
        # binary_map.specify_binary("build/vpnclient", BinaryType.EXECUTABLE)
        # binary_map.specify_binary("build/vpnbridge", BinaryType.EXECUTABLE)
        # binary_map.specify_binary("build/vpncmd", BinaryType.EXECUTABLE)
        binary_map.specify_binary(
            "build/libcedar.so", BinaryType.SHARED_LIBRARY
        )
        binary_map.specify_binary(
            "build/libmayaqua.so", BinaryType.SHARED_LIBRARY
        )

        return binary_map[revision]

    def run_tests(self) -> None:
        pass

    def compile(self) -> None:
        version_source = Path(self.source_of(self.primary_source))
        build_dir_name = "build"
        if not (version_source / build_dir_name).exists():
            (version_source / build_dir_name).mkdir()

        c_compiler = bb.compiler.cc(self)
        cxx_compiler = bb.compiler.cxx(self)
        with local.cwd(version_source):
            with local.env(CC=str(c_compiler), CXX=str(cxx_compiler)):
                bb.watch(local["./configure"])()
                bb.watch(make)(
                    "-C", build_dir_name, "-j", get_number_of_jobs(bb_cfg())
                )

    @classmethod
    def get_cve_product_info(cls) -> tp.List[tp.Tuple[str, str]]:
        return [("SoftEtherVPN", "SoftEtherVPN")]
