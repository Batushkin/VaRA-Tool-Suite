"""Project file for n2n."""
# import typing as tp
#
# import benchbuild as bb
# from benchbuild.project import Project
# from benchbuild.utils.cmd import make, source
# from benchbuild.utils.compiler import cc
# from benchbuild.utils.download import with_git
# from benchbuild.utils.settings import get_number_of_jobs
# from plumbum import local
#
# from varats.paper_mgmt.paper_config import project_filter_generator
# from varats.project.project_util import (
#     wrap_paths_to_binaries,
#     ProjectBinaryWrapper,
# )
# from varats.provider.cve.cve_provider import CVEProviderHook
#
#
# class N2n(Project, CVEProviderHook):  # type: ignore
#     """Peer-to-peer VPN (fetched by Git)"""
#
#     NAME = 'n2n'
#     GROUP = 'c_projects'
#     DOMAIN = 'VPN'
#     VERSION = 'HEAD'
#
#     #SRC_FILE = NAME + "-{0}".format(VERSION)
#     SOURCE = bb.source.Git(
#         remote="https://github.com/ntop/n2n.git",
#         refspec="HEAD",
#         version_filter=project_filter_generator("n2n"),
#         local="n2n"
#     )
#
#     @property
#     def binaries(self) -> tp.List[ProjectBinaryWrapper]:
#         """Return a list of binaries generated by the project."""
#         return wrap_paths_to_binaries(["n2n"])
#
#     def run_tests(self) -> None:
#         pass
#
#     def compile(self) -> None:
#         # self.download()
#         n2n_path = local.path(self.source_of(self.primary_source))
#         clang = bb.compiler.cc(self)
#         with local.cwd(n2n_path):
#             with local.env(CC=str(clang)):
#                 #run(git["checkout", "2.8-stable"])
#                 bb.watch(git)("checkout", "2.8-stable")
#                 # run(local["./autogen.sh"])
#                 bb.watch(local["./autogen.sh"])()
#                 # run(local["./configure"])
#                 bb.watch(local["./configure"])()
#                 #run(make["-j", get_number_of_jobs(bb_cfg())])
#                 bb.watch(make)("-j", get_number_of_jobs(bb_cfg()))
#
#     @classmethod
#     def get_cve_product_info(cls) -> tp.List[tp.Tuple[str, str]]:
#         return [("ntop", "n2n")]
