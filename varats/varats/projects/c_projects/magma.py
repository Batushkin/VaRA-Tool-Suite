"""Project file for magma."""
# import typing as tp
#
# import benchbuild as bb
# from benchbuild.project import Project
# from benchbuild.utils.cmd import make, source
# from benchbuild.utils.compiler import cc
# from benchbuild.utils.download import with_git
# from benchbuild.utils.settings import get_number_of_jobs
# from plumbum import local
#
# from varats.paper_mgmt.paper_config import project_filter_generator
# from varats.project.project_util import (
#     wrap_paths_to_binaries,
#     ProjectBinaryWrapper,
# )
# from varats.provider.cve.cve_provider import CVEProviderHook
#
#
# class Magma(Project, CVEProviderHook):  # type: ignore
#     """An encrypted email system (fetched by Git)"""
#
#     NAME = 'magma'
#     GROUP = 'c_projects'
#     DOMAIN = 'security'
#     VERSION = 'HEAD'
#
#     #SRC_FILE = NAME + "-{0}".format(VERSION)
#     SOURCE = bb.source.Git(
#         remote="https://github.com/lavabit/magma.git",
#         refspec="HEAD",
#         version_filter=project_filter_generator("magma"),
#         local="magma"
#     )
#
#     @property
#     def binaries(self) -> tp.List[ProjectBinaryWrapper]:
#         """Return a list of binaries generated by the project."""
#         # TODO
#         return wrap_paths_to_binaries(["magma"])
#
#     def run_tests(self) -> None:
#         pass
#
#     def compile(self) -> None:
#         # self.download()
#
#         magma_path = local.path(self.source_of(self.primary_source))
#         clang = bb.compiler.cc(self)
#         # TODO: install dependencies:
#         # yum -y install gcc make autoconf automake binutils bison flex gcc-c++ gettext libtool make patch pkgconfig mysql-server memcached gettext-devel patch perl perl-Time-HiRes check check-devel ncurses-devel libbsd-devel zlib-devel valgrind valgrind-devel
#         # TODO: check whether mysql and memcached need to be started for building
#         with local.cwd(magma_path):
#             with local.env(CC=str(clang)):
#                 #run(make["all", "-j", get_number_of_jobs(bb_cfg())])
#                 bb.watch(make)("all", "-j", get_number_of_jobs(bb_cfg()))
#
#     @classmethod
#     def get_cve_product_info(cls) -> tp.List[tp.Tuple[str, str]]:
#         return [("lavabit", "magma")]
